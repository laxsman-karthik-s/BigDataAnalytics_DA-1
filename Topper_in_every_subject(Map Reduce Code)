import java.io.*;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Partioner;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;
import org.apache.hadoop.mapreduce.*;


public class Toppers_22MIS1006 {
  public static class Map extends Mapper<Text, Text, Text, Text>{
    public void map(Text key, Text value, Context context) throws IOException, InterruptedException {
      context.write(key,value);
    }
  }

  public static class Reduce extends Reducer<Text,Text,Text,Text>{
    public void reduce(Text key,Iterable<Text> val,Context context) throws IOException,InterruptedException{
      String name="";
      int mark=0;
      for(Text t:val){
        String str = t.toString();
        String s[] = str.split(" ");
        if(Integer.parseInt(s[1])>mark){
            mark = Integer.parseInt(s[1]);
            name = s[0];
       }
    }
    String result = name+" "+mark;
    context.write(key,new Text(result));
    }
  } 

  public static class Partition extends Partitioner<Text,Text>{
    public int getPartition(Text key,Text val,int num){
      if("Mathematics".equals(key.toString())) return 0;
      else if("Physics".equals(key.toString())) return 1;
      else if("Chemistry".equals(key.toString())) return 2;
      else if("Biology".equals(key.toString())) return 3;
      else if("English".equals(key.toString())) return 4;
      else if("History".equals(key.toString())) return 5;
      else if("Geography".equals(key.toString())) return 6;
      else if("CS".equals(key.toString())) return 7;
      else if("Economics".equals(key.toString())) return 8;
      else return 9;
    }
  }
  
  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    conf.set("mapreduce.input.keyvaluelinerecordreader.key.value.separator", " ");

    Job job = new Job(conf, "word count");
    job.setJarByClass(Toppers_22MIS1006.class);
    job.setInputFormatClass(KeyValueTextInputFormat.class);

    job.setMapperClass(Map.class);
    job.setReducerClass(Reduce.class);
    job.setPartitionerClass(Partition.class);

    job.setNumReduceTasks(10);

    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(Text.class);

    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}
